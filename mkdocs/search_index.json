{
    "docs": [
        {
            "location": "/", 
            "text": "Sibyl\n\n\nSibyl from \nStartup.ML\n is an anomaly detection tool optimized for high-dimensional, heterogeneous (both categorical and continuous) datasets.   Its time complexity is near linear and space complexity is quadratic to the number of dimensions.\n\n\nOverview\n\n\n\n\n\n\nReal-World Data:\n\n\n\n\n\n\nPerformance:\n\n\n\n\n\n\nEnrichment:\n\n\n\n\n\n\nLicense\n\n\nPlease review the \nlicense terms\n before installing and using Sibyl.\n\n\nGetting started\n\n\nInstallation", 
            "title": "Home"
        }, 
        {
            "location": "/#sibyl", 
            "text": "Sibyl from  Startup.ML  is an anomaly detection tool optimized for high-dimensional, heterogeneous (both categorical and continuous) datasets.   Its time complexity is near linear and space complexity is quadratic to the number of dimensions.", 
            "title": "Sibyl"
        }, 
        {
            "location": "/#overview", 
            "text": "Real-World Data:    Performance:    Enrichment:", 
            "title": "Overview"
        }, 
        {
            "location": "/#license", 
            "text": "Please review the  license terms  before installing and using Sibyl.", 
            "title": "License"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/documentation/", 
            "text": "Anomaly Scoring\n\n\nSibyl can be used to compute an anomaly score for each instance in the dataset, or for a single instance.\n\n\n\n\nMethods\n:\n\n\nscore_dataset\n(sample_num, sample_size)\n\n\nReturn\n: numpy.ndarray (a list where the i_th element is the anomaly score for the i_th instance in the dataset).\n\n\nArguments\n:\n\n\nsample_num\n: int (number of random samples chosen without replacement from the dataset).\n\n\nsample_size\n: int (size of the random sample)\n\n\n\n\n\n\nscore_instance\n(single_instance, sample_num, sample_size)\n\n\nReturn\n: float (Anomaly score for the single instance)\n\n\nArguments\n:\n\n\nsingle_instance\n: pandas.Series (a single instance for which the anomaly score is to be computed)\n\n\nsample_num\n: int (number of random samples chosen without replacement from the dataset)\n\n\nsample_size\n: int (size of the random sample)\n\n\n\n\n\n\n\n\n\n\nFeature Importance\n\n\nSibyl provides a way to further explore the anomalous instances in a dataset, through supplying a list of features, and feature-pairs, that contribte most in its anomaly score and thus gain insight on why an instance was classified as an anomaly.\n\n\n\n\nMethods\n:\n\n\nget_feature_importance\n(single_instance)\n\n\nReturn\n: A dictionary consisting of the most important single feature in the anomaly score, as well as the single most important pair of features.\n\n\nArguments\n:\n\n\nsingle_instance\n: pandas.Series (a single instance for which the anomaly score is to be computed)\n\n\n\n\n\n\ninstance_inspect\n(single_instance, plot)\n\n\nReturn\n:\n\n\nfreq_1d\n: ndarray, containing the inverse relative frequency for each single feautre.\n\n\nfreq_2d\n: dxd ndarray, where ith column and jth row corresponds to the anomaly score due to features i and j.\n\n\nArguments\n:\n\n\nsingle_instance\n: pandas.Series (a single instance for which the anomaly score is to be computed)\n\n\nplot\n: Boolean, to show plots of the freq_1d and freq_2d values", 
            "title": "API"
        }, 
        {
            "location": "/documentation/#anomaly-scoring", 
            "text": "Sibyl can be used to compute an anomaly score for each instance in the dataset, or for a single instance.   Methods :  score_dataset (sample_num, sample_size)  Return : numpy.ndarray (a list where the i_th element is the anomaly score for the i_th instance in the dataset).  Arguments :  sample_num : int (number of random samples chosen without replacement from the dataset).  sample_size : int (size of the random sample)    score_instance (single_instance, sample_num, sample_size)  Return : float (Anomaly score for the single instance)  Arguments :  single_instance : pandas.Series (a single instance for which the anomaly score is to be computed)  sample_num : int (number of random samples chosen without replacement from the dataset)  sample_size : int (size of the random sample)", 
            "title": "Anomaly Scoring"
        }, 
        {
            "location": "/documentation/#feature-importance", 
            "text": "Sibyl provides a way to further explore the anomalous instances in a dataset, through supplying a list of features, and feature-pairs, that contribte most in its anomaly score and thus gain insight on why an instance was classified as an anomaly.   Methods :  get_feature_importance (single_instance)  Return : A dictionary consisting of the most important single feature in the anomaly score, as well as the single most important pair of features.  Arguments :  single_instance : pandas.Series (a single instance for which the anomaly score is to be computed)    instance_inspect (single_instance, plot)  Return :  freq_1d : ndarray, containing the inverse relative frequency for each single feautre.  freq_2d : dxd ndarray, where ith column and jth row corresponds to the anomaly score due to features i and j.  Arguments :  single_instance : pandas.Series (a single instance for which the anomaly score is to be computed)  plot : Boolean, to show plots of the freq_1d and freq_2d values", 
            "title": "Feature Importance"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nfrom sibyl import Sibyl\ndata = pandas.read_csv('expanded.csv', header=None)\n\n# Return anomaly score for every sample in the dataset\nsibyl_data = Sibyl(data)\nscore_vec = sibyl_data.score_dataset(50, 100)\n\n# Return anomaly score for a single random instance from the dataset\nrand_instance = data.iloc[30]\nscore_30 = sibyl_data.score_instance(rand_instance, 50, 100)", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "from sibyl import Sibyl\ndata = pandas.read_csv('expanded.csv', header=None)\n\n# Return anomaly score for every sample in the dataset\nsibyl_data = Sibyl(data)\nscore_vec = sibyl_data.score_dataset(50, 100)\n\n# Return anomaly score for a single random instance from the dataset\nrand_instance = data.iloc[30]\nscore_30 = sibyl_data.score_instance(rand_instance, 50, 100)", 
            "title": "Examples"
        }, 
        {
            "location": "/faq/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}