{
    "docs": [
        {
            "location": "/", 
            "text": "Sibyl from Startup.ML\n\n\nSibyl is an anomaly detection tool optimized for high-dimensional, heterogeneous (both categorical and continuous) datasets.   Its time complexity is near linear and space complexity is quadratic to the number of dimensions. \n\n\nOverview\n\n\n\n\n\n\nReal-World Dataset:\n\n\n\n\n\n\nPerformance:\n\n\n\n\n\n\nEnrichment:\n\n\n\n\n\n\nLicense\n\n\nGetting started\n\n\nInstallation", 
            "title": "Home"
        }, 
        {
            "location": "/#sibyl-from-startupml", 
            "text": "Sibyl is an anomaly detection tool optimized for high-dimensional, heterogeneous (both categorical and continuous) datasets.   Its time complexity is near linear and space complexity is quadratic to the number of dimensions.", 
            "title": "Sibyl from Startup.ML"
        }, 
        {
            "location": "/#overview", 
            "text": "Real-World Dataset:    Performance:    Enrichment:", 
            "title": "Overview"
        }, 
        {
            "location": "/#license", 
            "text": "", 
            "title": "License"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/documentation/", 
            "text": "Sibyl: Anomaly Detection in High Dimensional Heterogeneous Datasets\n\n\nIntroduction\n\n\nSibyl provides a way to discover anomalies in categorical datasets. If your data contains numberical attributes mixed with categorical ones, the method can be extended to take care of that case as well. But first, any numerical attributes need to be discretized before being supplied to the Sibyl function. Sibyl also calculates the \nfeatures\n and \nfeature pairs\n that were the main contributers in the anomaly score of some instance y.\n\n\nMethods Descriptions\n\n\nsibyl(dataset, ssamples_num, ssample_size, anomalies)\n\n\nanomaly_score = sibyl(dataset, ssamples_num, ssample_size, anomalies)\n\n\n\n\nThe main method of the sibyl module,  and it takes the following parameters as an input:\ndataset: The dataset consisting of categorical attributes.\nssample_num: The number of subsamples that are randomly chosen for checking random subspaces.\nssample_size: The subsample size.\nanomalies: Optional, the indexes of instances that you would like to see the most important features contributing to its anomaly score.\n\n\nThe output is an anomaly_score list, where the i_th element in the list is the anomaly score for the i_th sample in the dataset.\n\n\nsibyl_score(single_instance, dataset, ssamples_num, ssample_size)\n\n\nanomaly_score_one_instance = sibyl_score(single_instance, dataset, ssamples_num, ssample_size)\n\n\n\n\nThis method is essentially the same as the one above, except that it takes an extra input argument (single_instance), and it returns a single number, which is the anomaly_score for that instance by itself.\n\n\nget_feature_importance(single_instance,dataset)\n\n\nimportant_features = get_feature_importance(single_instance,dataset)\n\n\n\n\nIt takes a single instance, and the dataset, as parameters, and returns the most important features and feature_pairs in a dictionary, that contribute the most to the anomaly_score.\n\n\nanomaly_inspect(single_instance,dataset, plot = False)\n\n\n'''python\nanomaly_inspect(single_instance,dataset, plot = False)\n'''\n\n\nThe same as the \nget_feature_importance\n method, but with the extra option of plotting the inverse relative frequency for anmalous features in 1D and 2D subspaces.", 
            "title": "Index"
        }, 
        {
            "location": "/documentation/#sibyl-anomaly-detection-in-high-dimensional-heterogeneous-datasets", 
            "text": "", 
            "title": "Sibyl: Anomaly Detection in High Dimensional Heterogeneous Datasets"
        }, 
        {
            "location": "/documentation/#introduction", 
            "text": "Sibyl provides a way to discover anomalies in categorical datasets. If your data contains numberical attributes mixed with categorical ones, the method can be extended to take care of that case as well. But first, any numerical attributes need to be discretized before being supplied to the Sibyl function. Sibyl also calculates the  features  and  feature pairs  that were the main contributers in the anomaly score of some instance y.", 
            "title": "Introduction"
        }, 
        {
            "location": "/documentation/#methods-descriptions", 
            "text": "sibyl(dataset, ssamples_num, ssample_size, anomalies)  anomaly_score = sibyl(dataset, ssamples_num, ssample_size, anomalies)  The main method of the sibyl module,  and it takes the following parameters as an input:\ndataset: The dataset consisting of categorical attributes.\nssample_num: The number of subsamples that are randomly chosen for checking random subspaces.\nssample_size: The subsample size.\nanomalies: Optional, the indexes of instances that you would like to see the most important features contributing to its anomaly score.  The output is an anomaly_score list, where the i_th element in the list is the anomaly score for the i_th sample in the dataset.  sibyl_score(single_instance, dataset, ssamples_num, ssample_size)  anomaly_score_one_instance = sibyl_score(single_instance, dataset, ssamples_num, ssample_size)  This method is essentially the same as the one above, except that it takes an extra input argument (single_instance), and it returns a single number, which is the anomaly_score for that instance by itself.  get_feature_importance(single_instance,dataset)  important_features = get_feature_importance(single_instance,dataset)  It takes a single instance, and the dataset, as parameters, and returns the most important features and feature_pairs in a dictionary, that contribute the most to the anomaly_score.  anomaly_inspect(single_instance,dataset, plot = False)  '''python\nanomaly_inspect(single_instance,dataset, plot = False)\n'''  The same as the  get_feature_importance  method, but with the extra option of plotting the inverse relative frequency for anmalous features in 1D and 2D subspaces.", 
            "title": "Methods Descriptions"
        }, 
        {
            "location": "/examples/", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/faq/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}